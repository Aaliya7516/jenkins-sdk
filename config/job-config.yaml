# This file declaratively says what performance tests should be run, and where they should be run.
# The tools will work out all permutations of runs from this.
# They will interrogate the database and see what runs already exist.
# Any runs that need running, will be.

servers:
  # This is where the performers should run.  Currently only "localhost" is supported.
  # In future we want to supported scp-ing the performers to a remote host.
  performer: localhost

  driver:
    # Where the driver runs.  Currently only "localhost" is supported.
    hostname: localhost

    # Under this location will need these folders:
    # transactions-fit-performer
    # WARNING: It will automatically delete and re-checkout the directory 'couchbase-net-client' under here   (if need to run .NET performer)
    #          As the .NET performer requires this directory structure.
    source: /home/ec2-user

# Generally only CI should be talking to production database.  For local performance testing, spin up a localhost database.
# The password gets replaced by an environment variable when running on CI
database:
  # The driver will use the _docker variant if it is running inside Docker.  This allows running everything locally in Docker.
  hostname: 54.193.85.254
  hostname_docker: 54.193.85.254
  port: 5432
  username: postgres
  password: password
  database: perf

environment:
  # Can override any executables here, to workaround environmental/path issues.
  executables:
  #    docker: /usr/bin/docker
    #docker: "c:\\Program/ Files\\Docker\\Docker\\resources\\bin\\docker.exe"

  # These will be added to environment variables when running executables
  envvar:
#    DOCKER_HOST: cbdyncluster docker-host docker ps

  # The workspace directory is where all temporary files will be placed
  workspace: workspace

# These settings will not be saved to the database
settings:
  # Outputs what would be performed, without actually performing it.  Config files still get written.
  dryRun: false

  # Whether to ignore whatever runs are already in the database
  force: false

  # If confident that Docker images are built and up-to-date
  skipDriverDockerBuild: false
  skipPerformerDockerBuild: false

matrix:
  clusters:
    #    - type: cbdyncluster
    #      version: 7.0-stable
    #      replicas: 0
    #      nodes: 1

      # Currently CI is hardcoded to look for one cluster written in a specific format, so it can replace the hostname
      # In future, may return to having jenkins-sdk control cluster creation (CBD-4948)
    - type: unmanaged
      hostname: localhost
      # The driver will use the _docker variant if it is running inside Docker.  This allows running everything locally in Docker.
      hostname_docker: cbs
      storage: couchstore
      replicas: 0
      # A number of other fields will get filled in dynamically, both by CI and by jenkins-sdk.

  #    - type: gocaves
  #      source: /home/ec2-user/workspace/performance/sdk-performance/gocaves
  ##      source: /Users/charliehayes/Documents/GitHub/gocaves
  #      hostname: gocaves
  #      port: 8080

  implementations:
    # 3.0.7 is the earliest version of Java that the performer currently compiles with (expiry(Instant) added)
    - language: Java
      version: 3.1.X

    - language: Java
      version: 3.2.X

    - language: Java
      version: 3.3.X

    - language: Java
      version: 3.3.3-20220706.132043-1

    - language: Java
      version: 3.3.3-20220708.144632-2

    - language: Java
      version: 3.3.3-20220712.142915-3

    - language: Java
      version: 3.3.3-20220713.084621-4

    - language: Java
      version: 3.3.3-20220715.073606-5

    - language: Java
      version: snapshot


    # 1.1.0 is the earliest version of Scala that the performer currently compiles with (expiry(Instant) added)
    - language: Scala
      version: 1.1.X

    - language: Scala
      version: 1.2.X

    - language: Scala
      version: 1.3.X

    - language: Scala
      version: snapshot


    # There is some hardcoded logic that ignores the developer previews, since they don't compile with the performer
    - language: Kotlin
      version: 1.X.X

    - language: Kotlin
      version: snapshot


    - language: .NET
      version: 3.3.X

    - language: .NET
      version: snapshot

  workloads:

    # KV replaces
    - operations:
        - op: replace
          bounds:
            forSeconds: $forSeconds
          docLocation:
            method: pool
            poolSize: $poolSize
            poolSelectionStrategy: counter
      variables:
        custom:
          - name: poolSize
            value: 10000
        predefined:
          - name: horizontalScaling
            values:
              - 20

    # KV gets
    - operations:
        - op: get
          bounds:
            forSeconds: $forSeconds
          docLocation:
            method: pool
            poolSize: $poolSize
            poolSelectionStrategy: randomUniform
      variables:
        custom:
          - name: poolSize
            value: 10000
        predefined:
          - name: horizontalScaling
            values:
              - 20

    # KV inserts
    - operations:
        - op: insert
          bounds:
            forSeconds: $forSeconds
          docLocation:
            method: uuid
      variables:
        custom:
          - name: docNum
            value: 10000000
        predefined:
          - name: horizontalScaling
            values:
              - 20




# Top-level variables can be overwritten on a per-workload basis.
variables:
  # These GRPC settings are believed to give good results (CBD-4975).  GRPC settings don't get written to the
  # database, as streaming back results shouldn't affect the results themselves.  So changing these settings
  # will not trigger any reruns.
  grpc:
    flowControl: true
    batch: 1000
    compression: true
  custom:
    - name: forSeconds
      value: 300
