# This file declaratively says what performance tests should be run, and where they should be run.
# The tools will work out all permutations of runs from this.
# They will interrogate the database and see what runs already exist.
# Any runs that need running, will be.

servers:
  # This is where the performers should run.  Currently only "localhost" is supported.
  # In future we want to supported scp-ing the performers to a remote host.
  performer: localhost

  driver:
    # Where the driver runs.  Currently only "localhost" is supported.
    hostname: localhost

    # Either the location of a checked-out perf-sdk project, or "https://github.com/couchbaselabs/perf-sdk"
    source: /home/ec2-user/workspace/performance/sdk-performance/perf-sdk

# Generally only CI should be talking to production database.  For local performance testing, spin up a localhost database.
# The password gets replaced by an environment variable when running on CI
database:
  # The driver will use the _docker variant if it is running inside Docker.  This allows running everything locally in Docker.
  hostname: 54.193.85.254
  hostname_docker: 54.193.85.254
  port: 5432
  username: postgres
  password: password
  database: perf

environment:
  # Can override any executables here, to workaround environmental/path issues.
  executables:
    bash: /usr/bin/bash
  #    docker: /usr/bin/docker
    #docker: "c:\\Program/ Files\\Docker\\Docker\\resources\\bin\\docker.exe"

  # These will be added to environment variables when running executables
  envvar:
#    DOCKER_HOST: cbdyncluster docker-host docker ps

  # The workspace directory is where all temporary files will be placed
  workspace: workspace

# These settings will not be saved to the database
settings:
  # Outputs what would be performed, without actually performing it.  Config files still get written.
  dryRun: false

  # Whether to ignore whatever runs are already in the database
  force: true

  # If confident that all Docker images are built and up-to-date
  skipDockerBuild: false

matrix:
  clusters:
    #    - type: cbdyncluster
    #      version: 7.0-stable
    #      replicas: 0
    #      nodes: 1

      # Currently CI is hardcoded to look for one cluster written in a specific format, so it can replace the hostname
      # In future, may return to having jenkins-sdk control cluster creation (CBD-4948)
    - type: unmanaged
      hostname: localhost
      # The driver will use the _docker variant if it is running inside Docker.  This allows running everything locally in Docker.
      hostname_docker: cbs
  #    - type: gocaves
  #      source: /home/ec2-user/workspace/performance/sdk-performance/gocaves
  ##      source: /Users/charliehayes/Documents/GitHub/gocaves
  #      hostname: gocaves
  #      port: 8080

  implementations:
    # todo support version ranges
#    - language: java
#      version: 3.X.X
#
#    - language: java
#      version: 3.X.0
#      perLanguage:
#        - gc: shedonah

    # todo support snapshot builds
#    - language: java
#      version: snapshot

#    - language: java
#      version: 3.0.0
#
#    - language: java
#      version: 3.0.1
#
#    - language: java
#      version: 3.0.2
#
#    - language: java
#      version: 3.0.3
#
#    - language: java
#      version: 3.0.4
#
#    - language: java
#      version: 3.0.5
#
#    - language: java
#      version: 3.0.6
#
#    - language: java
#      version: 3.0.7
#
#    - language: java
#      version: 3.0.8
#
#    - language: java
#      version: 3.0.9
#
#    - language: java
#      version: 3.0.10
#
#    - language: java
#      version: 3.1.0
#
#    - language: java
#      version: 3.1.1
#
#    - language: java
#      version: 3.1.2
#
#    - language: java
#      version: 3.1.3
#
#    - language: java
#      version: 3.1.4
#
#    - language: java
#      version: 3.1.5
#
#    - language: java
#      version: 3.1.6
#
#    - language: java
#      version: 3.1.7
#
#    - language: java
#      version: 3.1.8
#
#    - language: java
#      version: 3.2.0
#
#    - language: java
#      version: 3.2.1
#
#    - language: java
#      version: 3.2.2
#
#    - language: java
#      version: 3.2.3
#
#    - language: java
#      version: 3.2.4
#
#    - language: java
#      version: 3.2.5
#
#    - language: java
#      version: 3.2.6
#
#    - language: java
#      version: 3.3.0
#
#    - language: java
#      version: 3.3.1
#
#    - language: java
#      version: 3.3.2

    - language: scala
      version: 1.3.0

    - language: scala
      version: 1.3.1

    - language: scala
      version: 1.3.2

#    - language: kotlin
#      version: 1.0.0
#
#    - language: kotlin
#      version: 1.0.1
#
#    - language: kotlin
#      version: 1.0.2

    #- language: python
    #  version: 41f71dce093ea0efa60a9fda59da4e4eaa3f5128
#        - language: python
#          version: 4.0.1
    #    - language: python
    #      version: 4.0.0
#    - language: python
#      version: 3.2.7
    #    - language: python
    #      version: 3.2.6
    #    - language: python
    #      version: 3.2.5
    #    - language: python
    #      version: 15056ea8dd6e172eab332fa29f83e3df29f4c4b5
    #    - language: python
    #      version: 7b43a9de5adb2debf4fb6981b9b82f01506e6b8c
    #    - language: python
    #      version: 18f8c4931f4047fa8a6761ccb4056acf2e2a012e
    #    - language: python
    #      version: 3ac9421131629239af815296ef0c98ec3a20d407
    #    - language: java
    #      version: 3.2.7
    #    - language: java
    #      version: 3.2.6
    #    - language: java
    #      version: 3.2.5
    #    - language: java
    #      version: 3.3.0
    #    - language: java
    #      version: 3.3.1
    # If just port is specified: the performer is expected to be running already at location servers.performer.
    # E.g. this is for localhost testing.
    # Otherwise, specify language and version, and this tool will spinup a performer running at location servers.performer.
    #    - port: 8060

  workloads:

    # KV replaces
    - operations:
        - op: replace
          count: $doc_num
          docLocation:
            method: pool
            poolSize: $pool_size
            poolSelectionStrategy: counter
      variables:
        custom:
          - name: doc_num
            value: 10000000
          - name: pool_size
            value: 10000
        predefined:
          - name: horizontal_scaling
            values:
              - 20

    # KV gets
    - operations:
        - op: get
          count: $doc_num
          docLocation:
            method: pool
            poolSize: $pool_size
            poolSelectionStrategy: random_uniform
      variables:
        custom:
          - name: doc_num
            value: 50000000
          - name: pool_size
            value: 10000
        predefined:
          - name: horizontal_scaling
            values:
              - 20

    # KV inserts
    - operations:
        - op: insert
          count: $doc_num
          docLocation:
            method: uuid
      variables:
        custom:
          - name: doc_num
            value: 10000000
        predefined:
          - name: horizontal_scaling
            values:
              - 20


# Top-level variables can be overwritten on a per-workload basis.
variables:
  # These GRPC settings are believed to give good results (CBD-4975).  Note that GRPC settings don't get written to the
  # database, as streaming back results shouldn't affect the results themselves.
  grpc:
    flowControl: true
    batch: 1000
    compression: true
